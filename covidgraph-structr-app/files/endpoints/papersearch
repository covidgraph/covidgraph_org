${{

	const request			 = $.get('request');
	let recommendationViewId = request['recommendationView'];
	
	//recommendationViewId = '0e0030f4924f4d3ea9d4f03e1b3e1a44';
	
	/****************************************\
	 #COLLECT-SCHEMA
	\****************************************/
	
	let nodes = [];
	let edges = [];
	
	if(!$.empty(recommendationViewId))
	{
		let rView = $.find('RecommendationView', recommendationViewId);
		
		if(!$.empty(rView))
		{
			let srcPaper = rView.srcPaper;
			
			nodes.push({
				id		: srcPaper.id,
				title	: srcPaper.name,
				shape	: 'image',
				image	: '/images/openbook.png'
			});			
			
			let relatedPapers = srcPaper.getRelatedPapersByGenes();

			for (let rpCollection of relatedPapers)
			{
				let paper 		= rpCollection.referencedPaper;
				let genes 		= rpCollection.sharedGenes;
				let amountGenes = $.size(genes);

				nodes.push({
					id		: paper.id,
					title	: paper.name,
					shape	: 'image',
					image	: '/images/closedbook.png',
					//value	: amountGenes
				});

				edges.push({
					from	: paper.id, 
					to		: srcPaper.id,
					//value	: amountGenes
				});
			}
			
			//Create Nodes for openedPapers in RecommendationView
			
			let rvPapers = rView.papers;
			
			for(let openedPaper of rvPapers)
			{
				let relatedPapers = openedPaper.getRelatedPapersByGenes();
				
				let openPaperNode = nodes.find(node=>node.id === openedPaper.id);
				
				if(!$.empty(openPaperNode))
					openPaperNode.image = '/images/openbook.png';
				
				for(let rpCollection of relatedPapers)
				{
					let paper 		= rpCollection.referencedPaper;
					let genes 		= rpCollection.sharedGenes;
					let amountGenes = $.size(genes);
					
					let containsPaperNode = nodes.find(node=> node.id === paper.id);
					
					if($.empty(containsPaperNode))
					{
						nodes.push({
							id		: paper.id,
							title	: paper.name,
							shape	: 'image',
							image	: '/images/closedbook.png',
							//value	: amountGenes
						});
					}
					
					let containsEdge = edges.find(edge=> (edge.from === paper.id && edge.to === openedPaper.id) || (edge.from === openedPaper.id && edge.to === paper.id));
					
					if($.empty(containsEdge))   
					{
						edges.push({
							from	: paper.id,
							to		: openedPaper.id,
							//value	: amountGenes
						});
					}
				}
			}
		}
	}
	
	const result = {
		nodes : nodes,
		edges : edges
	};
	
	/****************************************\
	 #PRINT-RESULT
	\****************************************/
	
	return JSON.stringify(result, null, 2);

}}